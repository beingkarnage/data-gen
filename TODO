### Code Quality
1. Add ignore case, while comparing static strings, i.e. configs ?
2. replace if-else with neccesary try catches.
3. write unit tests.
4. fix regex strategy, null_mask not used, remove map_to_null
5. tweak config params
    a. "operation": "insert_if_empty"
        "filter": {
            "lhs" : ["customerType"],
            "rhs" : ["Individuals"],
            "operation" : ["=="],
            "boolean" : []
        }

        both of them having same operation but different meaning and purpose fix that,(0/100)
    b. add shuffle/ random flag in config.


### Feature List
1. more Robust Relation support, Only supporting string and ints for now, what about dates, floats, etc/
2. maybe if possible think about pre data clean up ?
3. intermediate columns which helps in generation of other columns but not involved in final result
4. multiple table mapping
    -- Mapping strategy/relation to map one columns to another or generate first then map it, (0/100)
5. convert `relations` to `constraints` 
6. `constraints` can be a multi table mapping, relations, or another way.

### Optimzations
1. try using "in" when to check for one to with multiple values
2. out of memory issue, for e.g. arithmatic operation support large values in strategy, relations 
    -- heavy memory footprint when generating large number of rows
3. process dependent and independent columns separately, save the independent columns one by one, do not pass the whole df every where, then save the dependent columns one by one, only load those columns which the dependent column wants
4. optimize unique id generator, fails badly when need to generate large number of uuids,
    --example
        1. this big number, maintaining a set could be pain,
            92840183984919939494 
        2. an id with constant prefix or suffix or both
            HHSF88349S9358898985   
        3. id with random prefix or suffix or both.
            HHSF88349S93588IIIFD
5. write some performance script which measures the time consumed by which column and then tweak the optimizations accordingly

### Data-Gen & beyond
1. explore data generation via, ML libraries.
2. the filter obj, could be confusing, convert it to sql query, try duckDB <---pk suggested--->
3. config validator, do checks for, null/bad/negative/wrong value
4. Nested relationships, a relation inside a relation, think about this 

### Logic Fix or Testing
1. test insert and insert_if_empty with or without mask present, verify this for all strategies
2. Better coupling of relation conditions, right now i am doing, A & B | C, and will be performed by the order they are present, first (A & B) | C, but what if user wants to 
A & ( B | C )

### Study this
1. when you create big list inside a function, do they gets deleted after the funciton excutes ?
2. garbage collection in python
3. is vs ==

